package components

import models.Piece
import play.api.Play.current
import play.api.db.slick.DB
import play.api.db.slick.Session
import scala.slick.jdbc.StaticQuery
import scala.slick.jdbc.SQLInterpolation
import scala.util.Try

/**
 * @author juri
 */
trait PieceComponent {

  def initComponent(cake: ActiveSlickCake = ActiveSlickCake.cake) = new PieceComponent(cake)

  lazy val dal = initComponent()

  class PieceComponent(val cake: ActiveSlickCake) {

    def blankPiece(authorId: Long) = Piece.flattenedPiece(
      None, //id --> to be generated by active record 
      "Title goes here",
      "Short summary",
      Try("http://link/to/your/title-cover.png").getOrElse("/assests/title-cover.png"),
      System.currentTimeMillis(), //inception time 
      authorId,
      Set("tag1", "tag2"),
      0.0, //rating 
      "markdown source")

    //TODO
    def isOwner(pieceId: Long, userId: Long) = true

    def findByPieceId(id: Option[Long])(implicit author_id: Long): Piece = {
      id match {
        case Some(id) =>
          DB.withSession {
            implicit session: Session =>
              cake.Pieces.findById(id)
          }
        case None => blankPiece(author_id)  
      }

    }
  }
}