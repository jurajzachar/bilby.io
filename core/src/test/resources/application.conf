bilby.io {
  
  core {
  	authCacheSize = 10000
  	workers = 4
  }
  
  test-db = {
	  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
	  properties = {
	    databaseName = "bilby_io_test"
	    user = "play"
	    password = "play"
	  }
	  numThreads = 4
	  defaultTimeout = 5
  }
}

akka.bounded-mailbox {
  mailbox-type = "akka.dispatch.BoundedMailbox"
  mailbox-capacity = 1000
  mailbox-push-timeout-time = 10s
}
 
akka.actor.mailbox.requirements {
  "akka.dispatch.BoundedMessageQueueSemantics" = akka.bounded-mailbox
}

akka.actor.deployment {
	//execution context shared with slick DIO action executor
	/reg {
		dispatcher = dbio-dispatch
	}
	/reg/reg_router {
		dispatcher = dbio-dispatch
		router = round-robin-group
		//these may be remote paths too...
		routees.paths = ["/user/reg_w1", "/user/reg_w2", "/user/reg_w3", "/user/reg_w4"]
	}
}

akka {
  	//loggers = ["akka.event.slf4j.Slf4jLogger"]
	loglevel = "DEBUG"
}

dbio-dispatch {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

silhouette {
  authenticator {
    session {
      sessionKey = "auth"
      encryptAuthenticator = true
      useFingerprinting = false
      authenticatorIdleTimeout = 600
      authenticatorExpiry = 600
    }
    cookie {
      name = "silhouette_auth"
      path = "/"
      domain = "127.0.0.1"
      secure = false
      useFingerprinting = false
      maxAge = 31536000 # One year in seconds
      idleTimeout = 31536000 # One year in seconds
      expiry = 31536000 # One year in seconds
    }
  }

  oauth1TokenSecretProvider {
    cookieName = "silhouette_oauth1"
    cookiePath = "/"
    cookieDomain = "127.0.0.1"
    secureCookie = "false"
    httpOnlyCookie = "true"
    expirationTime = 600
  }

  oauth2StateProvider {
    cookieName = "silhouette_oauth2"
    cookiePath = "/"
    cookieDomain = "127.0.0.1"
    secureCookie = "false"
    httpOnlyCookie = "true"
    expirationTime = 600
  }

  facebook {
    authorizationUrl = "https://graph.facebook.com/v2.3/oauth/authorize"
    accessTokenUrl = "https://graph.facebook.com/v2.3/oauth/access_token"
    redirectURL = "https://127.0.0.1/signin/facebook"
    clientId = "CHANGEME"
    clientSecret = "CHANGEME"
    scope = "email"
  }

  google {
    authorizationUrl = "https://accounts.google.com/o/oauth2/auth"
    accessTokenUrl = "https://accounts.google.com/o/oauth2/token"
    redirectUrl = "https://127.0.0.1/signin/google"
    clientId = "CHANGEME"
    clientSecret = "CHANGEME"
    scope = "email profile"
  }

  twitter {
    requestTokenUrl = "https://twitter.com/oauth/request_token"
    accessTokenUrl = "https://twitter.com/oauth/access_token"
    authorizationUrl = "https://twitter.com/oauth/authenticate"
    callbackUrl = "https://127.0.0.1/signin/twitter"
    consumerKey = "CHANGEME"
    consumerSecret = "CHANGEME"
  }
}
