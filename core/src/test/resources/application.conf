//test db object only
test_db = {
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  properties = {
    databaseName = "bilby_io_test"
    user = "play"
    password = "play"
  }
  numThreads = 2
}

akka.actor.deployment {
	//exection context shared with slick DIO action executor
	/reg {
		dispatcher = dbio-dispatch
	}
	/reg/reg_router {
		router = round-robin-group
		//these may be remote paths too...
		routees.paths = ["/user/reg_w1", "/user/reg_w2", "/user/reg_w3", "/user/reg_w4"]
	}
}

akka {
	loglevel = "DEBUG"
}

dbio-dispatch {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 10
}

silhouette {
  authenticator {
    session {
      sessionKey = "auth"
      encryptAuthenticator = true
      useFingerprinting = false
      authenticatorIdleTimeout = 600
      authenticatorExpiry = 600
    }
    cookie {
      name = "silhouette_auth"
      path = "/"
      domain = "127.0.0.1"
      secure = false
      useFingerprinting = false
      maxAge = 31536000 # One year in seconds
      idleTimeout = 31536000 # One year in seconds
      expiry = 31536000 # One year in seconds
    }
  }

  oauth1TokenSecretProvider {
    cookieName = "silhouette_oauth1"
    cookiePath = "/"
    cookieDomain = "127.0.0.1"
    secureCookie = "false"
    httpOnlyCookie = "true"
    expirationTime = 600
  }

  oauth2StateProvider {
    cookieName = "silhouette_oauth2"
    cookiePath = "/"
    cookieDomain = "127.0.0.1"
    secureCookie = "false"
    httpOnlyCookie = "true"
    expirationTime = 600
  }

  facebook {
    authorizationUrl = "https://graph.facebook.com/v2.3/oauth/authorize"
    accessTokenUrl = "https://graph.facebook.com/v2.3/oauth/access_token"
    redirectURL = "https://127.0.0.1/signin/facebook"
    clientId = "CHANGEME"
    clientSecret = "CHANGEME"
    scope = "email"
  }

  google {
    authorizationUrl = "https://accounts.google.com/o/oauth2/auth"
    accessTokenUrl = "https://accounts.google.com/o/oauth2/token"
    redirectUrl = "https://127.0.0.1/signin/google"
    clientId = "CHANGEME"
    clientSecret = "CHANGEME"
    scope = "email profile"
  }

  twitter {
    requestTokenUrl = "https://twitter.com/oauth/request_token"
    accessTokenUrl = "https://twitter.com/oauth/access_token"
    authorizationUrl = "https://twitter.com/oauth/authenticate"
    callbackUrl = "https://127.0.0.1/signin/twitter"
    consumerKey = "CHANGEME"
    consumerSecret = "CHANGEME"
  }
}
